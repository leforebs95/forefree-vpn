#!/usr/bin/env python3
"""
PyVPN Configuration Setup Helper
Generates a secure .env file with random salt
"""

import os
import sys
import base64
import getpass


def generate_salt():
    """Generate a random 32-byte salt encoded as base64"""
    return base64.b64encode(os.urandom(32)).decode()


def get_password():
    """Prompt user for password with confirmation"""
    print()
    print("üìù VPN Password Setup")
    print("=" * 60)
    print("Enter a strong password for your VPN encryption.")
    print("Recommendation: Use at least 16 characters with mixed case,")
    print("numbers, and symbols.")
    print()
    
    while True:
        password1 = getpass.getpass("Enter password: ")
        password2 = getpass.getpass("Confirm password: ")
        
        if password1 != password2:
            print("‚úó Passwords don't match. Try again.")
            print()
            continue
        
        if len(password1) < 8:
            print(f"‚ö†Ô∏è  Warning: Password is only {len(password1)} characters.")
            print("   Recommend at least 16 characters for security.")
            proceed = input("   Use this password anyway? (y/N): ").lower()
            if proceed != 'y':
                print()
                continue
        
        return password1


def create_env_file(password, salt):
    """Create .env file with password and salt"""
    env_content = f"""# PyVPN Configuration
# Generated by setup_config.py
# DO NOT commit this file to git!

# VPN Password
VPN_PASSWORD={password}

# VPN Salt (32 bytes, base64 encoded)
# Keep this safe - losing it means you can't decrypt old sessions
VPN_SALT={salt}

# Optional: AWS Configuration (for production deployment)
AWS_REGION=us-west-1
VPN_SECRET_NAME=pyvpn/config
"""
    
    env_file = '.env'
    
    # Check if .env already exists
    if os.path.exists(env_file):
        print()
        print(f"‚ö†Ô∏è  {env_file} already exists!")
        overwrite = input("   Overwrite it? This will delete the old configuration. (y/N): ").lower()
        if overwrite != 'y':
            print("   Cancelled. Your existing .env file is unchanged.")
            return False
    
    # Write the file
    with open(env_file, 'w') as f:
        f.write(env_content)
    
    # Set restrictive permissions (owner read/write only)
    os.chmod(env_file, 0o600)
    
    return True


def update_gitignore():
    """Ensure .env is in .gitignore"""
    gitignore_file = '.gitignore'
    
    # Read existing .gitignore if it exists
    if os.path.exists(gitignore_file):
        with open(gitignore_file, 'r') as f:
            content = f.read()
        
        # Check if .env is already there
        if '.env' in content:
            return  # Already present
    
    # Add .env to .gitignore
    with open(gitignore_file, 'a') as f:
        f.write('\n# Environment variables (DO NOT COMMIT)\n')
        f.write('.env\n')


def create_aws_secret(password, salt):
    """Helper to create or update AWS Secrets Manager secret"""
    print()
    print("=" * 60)
    print("üì¶ AWS Secrets Manager Setup (Optional)")
    print("=" * 60)
    print()
    print("Would you like to create/update this configuration in AWS Secrets Manager?")
    print("This is useful for production deployments on EC2.")
    print()
    
    create_secret = input("Create/update AWS secret? (y/N): ").lower()
    if create_secret != 'y':
        return
    
    print()
    
    try:
        import boto3
        import json
        from botocore.exceptions import ClientError
        
        region = input("AWS Region [us-west-1]: ").strip() or "us-west-1"
        secret_name = input("Secret name [pyvpn/config]: ").strip() or "pyvpn/config"
        
        print()
        print(f"Connecting to AWS Secrets Manager in {region}...")
        
        client = boto3.client('secretsmanager', region_name=region)
        
        secret_value = json.dumps({
            "password": password,
            "salt": salt
        }, indent=2)
        
        # Check if secret exists
        secret_exists = False
        current_secret = None
        
        try:
            response = client.describe_secret(SecretId=secret_name)
            secret_exists = True
            print(f"‚úì Found existing secret: {secret_name}")
            print(f"  Created: {response['CreatedDate'].strftime('%Y-%m-%d %H:%M:%S')}")
            if 'LastChangedDate' in response:
                print(f"  Last modified: {response['LastChangedDate'].strftime('%Y-%m-%d %H:%M:%S')}")
            
            # Get current value to show what will be replaced
            try:
                current_response = client.get_secret_value(SecretId=secret_name)
                current_secret = json.loads(current_response['SecretString'])
                print()
                print("üìã Current configuration:")
                print(f"  Password: {'*' * len(current_secret.get('password', ''))}")
                print(f"  Salt: {current_secret.get('salt', '')[:20]}...")
            except Exception:
                pass  # Can't read current value, that's ok
                
        except ClientError as e:
            if e.response['Error']['Code'] == 'ResourceNotFoundException':
                secret_exists = False
                print(f"‚ÑπÔ∏è  Secret '{secret_name}' does not exist yet.")
            else:
                raise
        
        print()
        print("üîÑ New configuration:")
        print(f"  Password: {'*' * len(password)}")
        print(f"  Salt: {salt[:20]}...")
        print()
        
        if secret_exists:
            print("‚ö†Ô∏è  WARNING: This will replace the existing secret!")
            print("   Make sure no systems are currently using the old credentials.")
            print()
            confirm = input("   Update existing secret? (yes/No): ").strip().lower()
            if confirm != 'yes':
                print("   Cancelled. Existing secret unchanged.")
                return
            
            try:
                response = client.update_secret(
                    SecretId=secret_name,
                    SecretString=secret_value
                )
                print()
                print(f"‚úì Successfully updated secret: {secret_name}")
                print(f"  ARN: {response['ARN']}")
                print(f"  Version: {response['VersionId']}")
                print()
                print("‚ö†Ô∏è  Next steps:")
                print("   1. Restart your VPN server to use new credentials")
                print("   2. Update any clients with the new configuration")
                print("   3. Old credentials will stop working immediately")
                
            except ClientError as e:
                print(f"‚úó Failed to update secret: {e.response['Error']['Message']}")
                return
        else:
            # Create new secret
            confirm = input("   Create new secret? (Y/n): ").strip().lower()
            if confirm == 'n':
                print("   Cancelled.")
                return
            
            try:
                response = client.create_secret(
                    Name=secret_name,
                    Description='PyVPN encryption configuration',
                    SecretString=secret_value
                )
                print()
                print(f"‚úì Successfully created secret: {secret_name}")
                print(f"  ARN: {response['ARN']}")
                print()
                print("üìù Next steps:")
                print("   1. Update your CDK stack to grant EC2 access:")
                print(f"      vpn_secret = secretsmanager.Secret.from_secret_name_v2(")
                print(f"          self, 'VPNSecret', secret_name='{secret_name}'")
                print(f"      )")
                print(f"      vpn_secret.grant_read(instance_role)")
                print()
                print("   2. Deploy your infrastructure:")
                print("      cd infra && cdk deploy")
                print()
                print("   3. Server will automatically use this secret when started with:")
                print("      sudo uv run pyvpn-server --use-aws-secrets")
                
            except ClientError as e:
                print(f"‚úó Failed to create secret: {e.response['Error']['Message']}")
                return
        
    except ImportError:
        print("‚úó boto3 not installed.")
        print("  Install it with: uv add boto3")
        print()
    except ClientError as e:
        error_code = e.response['Error']['Code']
        error_msg = e.response['Error']['Message']
        
        if error_code == 'AccessDeniedException':
            print("‚úó Access denied to AWS Secrets Manager.")
            print("  Check your AWS credentials and IAM permissions.")
            print()
            print("  Required IAM permissions:")
            print("    - secretsmanager:CreateSecret")
            print("    - secretsmanager:DescribeSecret")
            print("    - secretsmanager:GetSecretValue")
            print("    - secretsmanager:UpdateSecret")
            print()
        else:
            print(f"‚úó AWS error ({error_code}): {error_msg}")
            print()
    except Exception as e:
        print(f"‚úó Unexpected error: {e}")
        print()


def main():
    print()
    print("=" * 60)
    print("üîê PyVPN Configuration Setup")
    print("=" * 60)
    print()
    print("This script will help you create a secure .env file")
    print("with randomly generated encryption salt.")
    print()
    
    # Generate salt
    print("üé≤ Generating random encryption salt...")
    salt = generate_salt()
    print(f"‚úì Generated: {salt[:20]}... ({len(base64.b64decode(salt))} bytes)")
    
    # Get password
    password = get_password()
    
    # Create .env file
    print()
    print("üíæ Creating .env file...")
    if create_env_file(password, salt):
        print(f"‚úì Created .env with secure permissions (600)")
    else:
        print("‚úó Setup cancelled.")
        return
    
    # Update .gitignore
    print("‚úì Updated .gitignore to exclude .env")
    update_gitignore()
    
    # Optional: Create AWS secret
    create_aws_secret(password, salt)
    
    # Summary
    print()
    print("=" * 60)
    print("‚úÖ Setup Complete!")
    print("=" * 60)
    print()
    print("Next steps:")
    print("  1. Test locally: sudo uv run pyvpn-server")
    print("  2. Connect client: sudo uv run pyvpn-client --server 127.0.0.1")
    print()
    print("‚ö†Ô∏è  Important:")
    print("  - Keep your .env file safe - it contains your encryption credentials")
    print("  - Never commit .env to git")
    print(f"  - Save this salt securely: {salt}")
    print("    (You'll need it if you regenerate your .env file)")
    print()


if __name__ == '__main__':
    try:
        main()
    except KeyboardInterrupt:
        print("\n\nSetup cancelled.")
        sys.exit(1)